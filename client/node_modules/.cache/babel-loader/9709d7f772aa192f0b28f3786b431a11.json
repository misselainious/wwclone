{"ast":null,"code":"// Load modules\nvar Any = require('./any');\n\nvar Errors = require('./errors');\n\nvar Hoek = require('hoek'); // Declare internals\n\n\nvar internals = {};\n\ninternals.Binary = function () {\n  Any.call(this);\n  this._type = 'binary';\n};\n\nHoek.inherits(internals.Binary, Any);\n\ninternals.Binary.prototype._base = function (value, state, options) {\n  var result = {\n    value: value\n  };\n\n  if (typeof value === 'string' && options.convert) {\n    try {\n      var converted = new Buffer(value, this._flags.encoding);\n      result.value = converted;\n    } catch (e) {}\n  }\n\n  result.errors = Buffer.isBuffer(result.value) ? null : Errors.create('binary.base', null, state, options);\n  return result;\n};\n\ninternals.Binary.prototype.encoding = function (encoding) {\n  Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n  var obj = this.clone();\n  obj._flags.encoding = encoding;\n  return obj;\n};\n\ninternals.Binary.prototype.min = function (limit) {\n  Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n  return this._test('min', limit, function (value, state, options) {\n    if (value.length >= limit) {\n      return null;\n    }\n\n    return Errors.create('binary.min', {\n      limit: limit,\n      value: value\n    }, state, options);\n  });\n};\n\ninternals.Binary.prototype.max = function (limit) {\n  Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n  return this._test('max', limit, function (value, state, options) {\n    if (value.length <= limit) {\n      return null;\n    }\n\n    return Errors.create('binary.max', {\n      limit: limit,\n      value: value\n    }, state, options);\n  });\n};\n\ninternals.Binary.prototype.length = function (limit) {\n  Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n  return this._test('length', limit, function (value, state, options) {\n    if (value.length === limit) {\n      return null;\n    }\n\n    return Errors.create('binary.length', {\n      limit: limit,\n      value: value\n    }, state, options);\n  });\n};\n\nmodule.exports = new internals.Binary();","map":null,"metadata":{},"sourceType":"script"}