{"ast":null,"code":"import _objectSpread from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  // Initializing important variables\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    this.fetch = this.fetch.bind(this); // React binding stuff\n\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(username, password) {\n      var _this = this;\n\n      // Get a token from api server using the fetch api\n      // console.log('logindomain', this.domain);\n      return this.fetch(\"/api/login\", {\n        method: 'POST',\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      }).then(function (res) {\n        _this.setToken(res.token); // Setting the token in localStorage\n\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // GEtting token from localstorage\n\n      console.log('token', token);\n      var loggedIn = !!token && !this.isTokenExpired(token);\n      !loggedIn && !sessionStorage.getItem('referrer') && sessionStorage.setItem('referrer', window.location.pathname);\n      return loggedIn; // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token); // console.log(\"decoded\", decoded);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired. N\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json' // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/elainecadman/Desktop/myHomeworks/WineWise/client/src/components/login/AuthService.js"],"names":["decode","AuthService","fetch","bind","login","getProfile","username","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","getToken","console","log","loggedIn","isTokenExpired","sessionStorage","getItem","setItem","window","location","pathname","decoded","exp","Date","now","err","idToken","localStorage","removeItem","url","options","headers","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\nexport default class AuthService {\n    // Initializing important variables\n    constructor() {\n        this.fetch = this.fetch.bind(this) // React binding stuff\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login(username, password) {\n        // Get a token from api server using the fetch api\n        // console.log('logindomain', this.domain);\n        return this.fetch(`/api/login`, {\n            method: 'POST',\n            body: JSON.stringify({\n                username,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken() // GEtting token from localstorage\n        console.log('token', token);\n        const loggedIn = !!token && !this.isTokenExpired(token);\n        !loggedIn && !sessionStorage.getItem('referrer') && sessionStorage.setItem('referrer', window.location.pathname);\n        return loggedIn; // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            // console.log(\"decoded\", decoded);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}