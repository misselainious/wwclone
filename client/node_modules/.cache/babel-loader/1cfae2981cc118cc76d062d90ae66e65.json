{"ast":null,"code":"import _classCallCheck from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elainecadman/Desktop/myHomeworks/WineWise/client/src/pages/producers.js\";\nimport React, { Component, createRef } from \"react\"; // import CheckboxSidebar from \"../components/CheckboxSidebar/CheckboxSidebar\";\n\nimport API from \"../utils/API\";\nimport { List } from \"../components/List\";\nimport { Grid, Card, Sticky, Rail, Ref, Header, Segment, CommentAction } from \"semantic-ui-react\";\nimport Producercard from \"../components/ProducerCard\";\nimport SearchProducers from \"../components/SearchProducers\";\nimport { createReadStream } from \"fs\";\nimport { createRequireFromPath } from \"module\";\n\nvar Producers =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Producers, _Component);\n\n  function Producers() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Producers);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Producers)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.contextRef = createRef();\n    _this.state = {\n      Producers: [],\n      isLoading: false\n    };\n\n    _this.loadProducers = function () {\n      window.scrollTo(0, 0);\n      API.getProducers().then(function (res) {\n        return _this.setState({\n          Producers: res.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Producers, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.scrollTo(0, 0);\n      this.loadProducers();\n    }\n  }, {\n    key: \"render\",\n    // loadProducers = () => {\n    //   this.setState({\n    //     isLoading: true\n    //   })\n    //   API.getProducers()\n    //     .then(res => {\n    //       //The World's least efficient way of alphabetizing an array of objects\n    //       let idArray=[];\n    //       res.data.map( producer => {idArray.push(producer.Producer)})\n    //       idArray.sort()\n    //       let alphabeticalProducers = []\n    //       idArray.map( id => {\n    //         alphabeticalProducers.push( res.data.find( (producer)=>{ return producer.Producer === id } ))\n    //       })\n    //       this.setState({ Producers: alphabeticalProducers })\n    //     }\n    //     )\n    //     .catch(err => console.log(err));\n    // };\n    value: function render() {\n      var france = this.state.Producers.filter(function (p) {\n        return p.Country === \"France\";\n      });\n      var spain = this.state.Producers.filter(function (p) {\n        return p.Country === \"Spain\";\n      });\n      var portugal = this.state.Producers.filter(function (p) {\n        return p.Country === \"Portugal\";\n      });\n      var greece = this.state.Producers.filter(function (p) {\n        return p.Country === \"Greece\";\n      });\n      var germany = this.state.Producers.filter(function (p) {\n        return p.Country === \"Germany\";\n      });\n      var austria = this.state.Producers.filter(function (p) {\n        return p.Country === \"Austria\";\n      });\n\n      function compare(a, b) {\n        var numA = a.Order;\n        var numB = b.Order;\n        var comparison = 0;\n\n        if (numA > numB) {\n          comparison = 1;\n        } else if (numA < numB) {\n          comparison = -1;\n        }\n\n        return comparison;\n      }\n\n      france = france.sort(compare);\n      return React.createElement(Grid, {\n        centered: true,\n        style: {\n          marginTop: \"40px\",\n          marginBottom: \"40px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#510409',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"40px\",\n          paddingBottom: \"40px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Our Producers\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontSize: '1.1em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Our producers are the best producers. Wine is often served with dinner. Be not offended when your ex drinks wine. Cheese is a perennial pair with chardonnay, sauvignon blanc, don't get started on the pinks and reds. Oak imparts vanilla, toast, caramel and coffee. The aftertaste, or \\\"finish,\\\" is the primary factor in judging the quality and character of wine. Wines that are named for a region are always capitalized \\u2013 Bordeaux, Burgundy, Champagne, Rioja, Chianti, Lambrusco, etc. Swine and wine pair well.\")))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"France\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, france.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, france.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Spain\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, spain.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, spain.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Portugal\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, portugal.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, portugal.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Greece\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, greece.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, greece.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Germany\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, germany.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, germany.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"right\",\n        style: {\n          color: '#221244',\n          backgroundColor: '#f2efef',\n          textAlign: 'center',\n          paddingTop: \"20px\",\n          paddingBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Austria\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, austria.length ? React.createElement(Card.Group, {\n        itemsPerRow: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, austria.map(function (producer) {\n        return React.createElement(Producercard, {\n          id: producer.Producer,\n          producer: producer.Producer,\n          country: producer.Country,\n          subregion: producer.Subregion,\n          region: producer.Region,\n          key: producer._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        });\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, this.state.isLoading ? \"loading...\" : \"No results to display\"))));\n    }\n  }]);\n\n  return Producers;\n}(Component);\n\nexport default Producers;","map":{"version":3,"sources":["/Users/elainecadman/Desktop/myHomeworks/WineWise/client/src/pages/producers.js"],"names":["React","Component","createRef","API","List","Grid","Card","Sticky","Rail","Ref","Header","Segment","CommentAction","Producercard","SearchProducers","createReadStream","createRequireFromPath","Producers","contextRef","state","isLoading","loadProducers","window","scrollTo","getProducers","then","res","setState","data","catch","err","console","log","france","filter","p","Country","spain","portugal","greece","germany","austria","compare","a","b","numA","Order","numB","comparison","sort","marginTop","marginBottom","color","backgroundColor","textAlign","paddingTop","paddingBottom","fontSize","length","map","producer","Producer","Subregion","Region","_id"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\n// import CheckboxSidebar from \"../components/CheckboxSidebar/CheckboxSidebar\";\nimport API from \"../utils/API\";\nimport { List } from \"../components/List\";\nimport { Grid, Card, Sticky, Rail, Ref, Header, Segment, CommentAction } from \"semantic-ui-react\";\nimport Producercard from \"../components/ProducerCard\"\nimport SearchProducers from \"../components/SearchProducers\"\nimport { createReadStream } from \"fs\";\nimport { createRequireFromPath } from \"module\";\n\nclass Producers extends Component {\n\ncontextRef = createRef()\n\n    state = {\n      Producers: [],\n      isLoading: false\n    };\n  \n    componentDidMount() {\n      window.scrollTo(0, 0)\n      this.loadProducers();\n    }\n  \n\n    loadProducers = () => {\n\n      window.scrollTo(0,0);\n      API.getProducers()\n      .then(res => \n        this.setState({Producers: res.data})\n        )\n        .catch(err => console.log(err));\n    }\n\n\n\n  // loadProducers = () => {\n  //   this.setState({\n  //     isLoading: true\n  //   })\n  //   API.getProducers()\n  //     .then(res => {\n  //       //The World's least efficient way of alphabetizing an array of objects\n  //       let idArray=[];\n  //       res.data.map( producer => {idArray.push(producer.Producer)})\n  //       idArray.sort()\n  //       let alphabeticalProducers = []\n  //       idArray.map( id => {\n  //         alphabeticalProducers.push( res.data.find( (producer)=>{ return producer.Producer === id } ))\n  //       })\n  //       this.setState({ Producers: alphabeticalProducers })\n  //     }\n  //     )\n  //     .catch(err => console.log(err));\n  // };\n  \nrender() {\n let france = this.state.Producers.filter(p => p.Country === \"France\");\n let spain = this.state.Producers.filter(p => p.Country === \"Spain\");\n let portugal = this.state.Producers.filter(p => p.Country === \"Portugal\");\n let greece = this.state.Producers.filter(p => p.Country === \"Greece\");\n let germany = this.state.Producers.filter(p => p.Country === \"Germany\");\n let austria = this.state.Producers.filter(p => p.Country === \"Austria\");\n\n function compare(a,b){\n   const numA = a.Order;\n   const numB = b.Order;\n\n   let comparison = 0;\n   if(numA > numB){\n     comparison = 1;\n   } else if (numA < numB){\n     comparison = -1\n   }\n   return comparison\n }\n\n france = france.sort(compare);\n\n    return (\n        <Grid centered style={{marginTop: \"40px\", marginBottom: \"40px\"}}>\n        <Grid.Row>\n      <Grid.Column>\n        <Header as='h1' textAlign='right' style={{color: '#510409', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"40px\", paddingBottom: \"40px\"}} >\n      Our Producers\n    </Header>\n    </Grid.Column>\n        </Grid.Row>\n    <Grid.Row>\n      <Grid.Column width={11}>\n    <center>\n      <p style={{fontSize: '1.1em'}}>Our producers are the best producers. Wine is often served with dinner. Be not offended when your ex drinks wine. Cheese is a perennial pair with chardonnay, sauvignon blanc, don't get started on the pinks and reds. Oak imparts vanilla, toast, caramel and coffee. The aftertaste, or \"finish,\" is the primary factor in judging the quality and character of wine. Wines that are named for a region are always capitalized – Bordeaux, Burgundy, Champagne, Rioja, Chianti, Lambrusco, etc. Swine and wine pair well.\n\n\n      </p>\n              {/* <SearchProducers />          */}\n            </center>\n            </Grid.Column>\n    </Grid.Row>\n\n{/* FRANCE */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      France\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {france.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {france.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n{/* SPAIN */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      Spain\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {spain.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {spain.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n\n{/* PORTUGAL */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      Portugal\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {portugal.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {portugal.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n{/* GREECE */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      Greece\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {greece.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {greece.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n{/* Germany */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      Germany\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {germany.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {germany.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n            {/* AUSTRIA */}\n<Grid.Row>\n  <Grid.Column>\n<Header as='h1' textAlign='right' style={{color: '#221244', backgroundColor: '#f2efef', textAlign: 'center', paddingTop: \"20px\", paddingBottom: \"20px\"}} >\n      Austria\n    </Header>\n    </Grid.Column>\n</Grid.Row>\n\n    <Grid.Row>\n\n<Grid.Column width={12}>\n        {austria.length ? (\n          \n            <Card.Group itemsPerRow={4}>\n          {austria.map(producer => (\n              <Producercard id={producer.Producer} producer={producer.Producer} country={producer.Country} subregion={producer.Subregion} region={producer.Region} key={producer._id}/>            \n          ))}\n        </Card.Group>\n            ) : (\n              <h3>{this.state.isLoading ? \"loading...\": \"No results to display\"}</h3>\n            )}\n            </Grid.Column>\n          \n            </Grid.Row>\n\n\n     </Grid>\n    );\n  }\n}\n\nexport default Producers;\n\n"]},"metadata":{},"sourceType":"module"}