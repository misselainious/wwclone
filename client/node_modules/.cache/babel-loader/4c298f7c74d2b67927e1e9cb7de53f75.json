{"ast":null,"code":"// Load modules\nvar Any = require('./any');\n\nvar Cast = require('./cast');\n\nvar Ref = require('./ref'); // Declare internals\n\n\nvar internals = {\n  alternatives: require('./alternatives'),\n  array: require('./array'),\n  boolean: require('./boolean'),\n  binary: require('./binary'),\n  date: require('./date'),\n  number: require('./number'),\n  object: require('./object'),\n  string: require('./string')\n};\n\ninternals.root = function () {\n  var any = new Any();\n  var root = any.clone();\n\n  root.any = function () {\n    return any;\n  };\n\n  root.alternatives = root.alt = function () {\n    return arguments.length ? internals.alternatives.try.apply(internals.alternatives, arguments) : internals.alternatives;\n  };\n\n  root.array = function () {\n    return internals.array;\n  };\n\n  root.boolean = root.bool = function () {\n    return internals.boolean;\n  };\n\n  root.binary = function () {\n    return internals.binary;\n  };\n\n  root.date = function () {\n    return internals.date;\n  };\n\n  root.func = function () {\n    return internals.object._func();\n  };\n\n  root.number = function () {\n    return internals.number;\n  };\n\n  root.object = function () {\n    return arguments.length ? internals.object.keys.apply(internals.object, arguments) : internals.object;\n  };\n\n  root.string = function () {\n    return internals.string;\n  };\n\n  root.ref = function () {\n    return Ref.create.apply(null, arguments);\n  };\n\n  root.isRef = function (ref) {\n    return Ref.isRef(ref);\n  };\n\n  root.validate = function (value\n  /*, [schema], [options], callback */\n  ) {\n    var last = arguments[arguments.length - 1];\n    var callback = typeof last === 'function' ? last : null;\n    var count = arguments.length - (callback ? 1 : 0);\n\n    if (count === 1) {\n      return any.validate(value, callback);\n    }\n\n    var options = count === 3 ? arguments[2] : {};\n    var schema = root.compile(arguments[1]);\n    return schema._validateWithOptions(value, options, callback);\n  };\n\n  root.describe = function () {\n    var schema = arguments.length ? root.compile(arguments[0]) : any;\n    return schema.describe();\n  };\n\n  root.compile = function (schema) {\n    try {\n      return Cast.schema(schema);\n    } catch (err) {\n      if (err.hasOwnProperty('path')) {\n        err.message += '(' + err.path + ')';\n      }\n\n      throw err;\n    }\n  };\n\n  root.assert = function (value, schema, message) {\n    root.attempt(value, schema, message);\n  };\n\n  root.attempt = function (value, schema, message) {\n    var result = root.validate(value, schema);\n    var error = result.error;\n\n    if (error) {\n      if (!message) {\n        error.message = error.annotate();\n        throw error;\n      }\n\n      if (!(message instanceof Error)) {\n        error.message = message + ' ' + error.annotate();\n        throw error;\n      }\n\n      throw message;\n    }\n\n    return result.value;\n  };\n\n  return root;\n};\n\nmodule.exports = internals.root();","map":null,"metadata":{},"sourceType":"script"}