{"ast":null,"code":"// Load modules\nvar Hoek = require('hoek');\n\nvar Any = require('./any');\n\nvar Cast = require('./cast');\n\nvar Ref = require('./ref');\n\nvar Errors = require('./errors'); // Declare internals\n\n\nvar internals = {};\n\ninternals.Alternatives = function () {\n  Any.call(this);\n  this._type = 'alternatives';\n\n  this._invalids.remove(null);\n\n  this._inner.matches = [];\n};\n\nHoek.inherits(internals.Alternatives, Any);\n\ninternals.Alternatives.prototype._base = function (value, state, options) {\n  var errors = [];\n\n  for (var i = 0, il = this._inner.matches.length; i < il; ++i) {\n    var item = this._inner.matches[i];\n    var schema = item.schema;\n\n    if (!schema) {\n      var failed = item.is._validate(item.ref(state.parent, options), null, options, state.parent).errors;\n\n      schema = failed ? item.otherwise : item.then;\n\n      if (!schema) {\n        continue;\n      }\n    }\n\n    var result = schema._validate(value, state, options);\n\n    if (!result.errors) {\n      // Found a valid match\n      return result;\n    }\n\n    errors = errors.concat(result.errors);\n  }\n\n  return {\n    errors: errors.length ? errors : Errors.create('alternatives.base', null, state, options)\n  };\n};\n\ninternals.Alternatives.prototype.try = function ()\n/* schemas */\n{\n  var schemas = Hoek.flatten(Array.prototype.slice.call(arguments));\n  Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');\n  var obj = this.clone();\n\n  for (var i = 0, il = schemas.length; i < il; ++i) {\n    var cast = Cast.schema(schemas[i]);\n\n    if (cast._refs.length) {\n      obj._refs = obj._refs.concat(cast._refs);\n    }\n\n    obj._inner.matches.push({\n      schema: cast\n    });\n  }\n\n  return obj;\n};\n\ninternals.Alternatives.prototype.when = function (ref, options) {\n  Hoek.assert(Ref.isRef(ref) || typeof ref === 'string', 'Invalid reference:', ref);\n  Hoek.assert(options, 'Missing options');\n  Hoek.assert(typeof options === 'object', 'Invalid options');\n  Hoek.assert(options.hasOwnProperty('is'), 'Missing \"is\" directive');\n  Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of \"then\" or \"otherwise\"');\n  var obj = this.clone();\n  var is = Cast.schema(options.is);\n\n  if (options.is === null || !options.is.isJoi) {\n    // Only apply required if this wasn't already a schema, we'll suppose people know what they're doing\n    is = is.required();\n  }\n\n  var item = {\n    ref: Cast.ref(ref),\n    is: is,\n    then: options.then !== undefined ? Cast.schema(options.then) : undefined,\n    otherwise: options.otherwise !== undefined ? Cast.schema(options.otherwise) : undefined\n  };\n  Ref.push(obj._refs, item.ref);\n  obj._refs = obj._refs.concat(item.is._refs);\n\n  if (item.then && item.then._refs) {\n    obj._refs = obj._refs.concat(item.then._refs);\n  }\n\n  if (item.otherwise && item.otherwise._refs) {\n    obj._refs = obj._refs.concat(item.otherwise._refs);\n  }\n\n  obj._inner.matches.push(item);\n\n  return obj;\n};\n\ninternals.Alternatives.prototype.describe = function () {\n  var description = Any.prototype.describe.call(this);\n  var alternatives = [];\n\n  for (var i = 0, il = this._inner.matches.length; i < il; ++i) {\n    var item = this._inner.matches[i];\n\n    if (item.schema) {\n      // try()\n      alternatives.push(item.schema.describe());\n    } else {\n      // when()\n      var when = {\n        ref: item.ref.toString(),\n        is: item.is.describe()\n      };\n\n      if (item.then) {\n        when.then = item.then.describe();\n      }\n\n      if (item.otherwise) {\n        when.otherwise = item.otherwise.describe();\n      }\n\n      alternatives.push(when);\n    }\n  }\n\n  description.alternatives = alternatives;\n  return description;\n};\n\nmodule.exports = new internals.Alternatives();","map":null,"metadata":{},"sourceType":"script"}