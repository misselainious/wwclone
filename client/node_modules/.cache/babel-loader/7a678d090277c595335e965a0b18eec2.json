{"ast":null,"code":"// Load modules\nvar Any = require('./any');\n\nvar Errors = require('./errors');\n\nvar Ref = require('./ref');\n\nvar Hoek = require('hoek');\n\nvar Moment = require('moment'); // Declare internals\n\n\nvar internals = {};\ninternals.isoDate = /^(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/;\ninternals.invalidDate = new Date('');\n\ninternals.isIsoDate = function () {\n  var isoString = internals.isoDate.toString();\n  return function (date) {\n    return date && date.toString() === isoString;\n  };\n}();\n\ninternals.Date = function () {\n  Any.call(this);\n  this._type = 'date';\n};\n\nHoek.inherits(internals.Date, Any);\n\ninternals.Date.prototype._base = function (value, state, options) {\n  var result = {\n    value: options.convert && internals.toDate(value, this._flags.format) || value\n  };\n\n  if (result.value instanceof Date && !isNaN(result.value.getTime())) {\n    result.errors = null;\n  } else {\n    result.errors = Errors.create(internals.isIsoDate(this._flags.format) ? 'date.isoDate' : 'date.base', null, state, options);\n  }\n\n  return result;\n};\n\ninternals.toDate = function (value, format) {\n  if (value instanceof Date) {\n    return value;\n  }\n\n  if (typeof value === 'string' || Hoek.isInteger(value)) {\n    if (typeof value === 'string' && /^[+-]?\\d+$/.test(value)) {\n      value = parseInt(value, 10);\n    }\n\n    var date;\n\n    if (format) {\n      if (internals.isIsoDate(format)) {\n        date = format.test(value) ? new Date(value) : internals.invalidDate;\n      } else {\n        date = Moment(value, format, true);\n        date = date.isValid() ? date.toDate() : internals.invalidDate;\n      }\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isNaN(date.getTime())) {\n      return date;\n    }\n  }\n\n  return null;\n};\n\ninternals.compare = function (type, compare) {\n  return function (date) {\n    var isNow = date === 'now';\n    var isRef = Ref.isRef(date);\n\n    if (!isNow && !isRef) {\n      date = internals.toDate(date);\n    }\n\n    Hoek.assert(date, 'Invalid date format');\n    return this._test(type, date, function (value, state, options) {\n      var compareTo;\n\n      if (isNow) {\n        compareTo = Date.now();\n      } else if (isRef) {\n        compareTo = internals.toDate(date(state.parent, options));\n\n        if (!compareTo) {\n          return Errors.create('date.ref', {\n            ref: date.key\n          }, state, options);\n        }\n\n        compareTo = compareTo.getTime();\n      } else {\n        compareTo = date.getTime();\n      }\n\n      if (compare(value.getTime(), compareTo)) {\n        return null;\n      }\n\n      return Errors.create('date.' + type, {\n        limit: new Date(compareTo)\n      }, state, options);\n    });\n  };\n};\n\ninternals.Date.prototype.min = internals.compare('min', function (value, date) {\n  return value >= date;\n});\ninternals.Date.prototype.max = internals.compare('max', function (value, date) {\n  return value <= date;\n});\n\ninternals.Date.prototype.format = function (format) {\n  Hoek.assert(typeof format === 'string' || Array.isArray(format) && format.every(function (f) {\n    return typeof f === 'string';\n  }), 'Invalid format.');\n  var obj = this.clone();\n  obj._flags.format = format;\n  return obj;\n};\n\ninternals.Date.prototype.iso = function () {\n  var obj = this.clone();\n  obj._flags.format = internals.isoDate;\n  return obj;\n};\n\ninternals.Date.prototype._isIsoDate = function (value) {\n  return internals.isoDate.test(value);\n};\n\nmodule.exports = new internals.Date();","map":null,"metadata":{},"sourceType":"script"}